<?php
defined('BASEPATH') OR exit('No direct script access allowed');
/* It is useed admin login authuntications */

class Login extends CI_Controller {

	public function index()
	{
                redirect(base_url().'login');
                exit;  
		$this->load->view('content/login');
	}
        
	public function forget_password()
	{       
                $login=$_GET['login'];
                $login = base64_decode($login);
                $data['login']=$login;
                $this->load->view('content/forget_password',$data);
	}  
	public function reset_password()
	{       
                $login=$_GET['login'];
                $login = base64_decode($login);
                $data['login']=$login;
                $this->load->view('content/reset_password',$data);
	}  
        function generatePassword($length = 12) {
            $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_';
            $charactersLength = strlen($characters);
            $password = '';

            for ($i = 0; $i < $length; $i++) {
                $password .= $characters[rand(0, $charactersLength - 1)];
            }

            return $password;
        }


        function customtextemail($data)
        {
        $subject=$data['subject'];
        $message2=$data['message'];
        $to=$data['to'];
        $email_results = $this->sparkpost('POST', 'transmissions', [
                            'content' => [
                                'from' => [
                                    'name' => '64F',
                                    'email' => 'info@64facetcrm.com',
                                ],
                                'subject' => $subject,
                                'html' => $message2,
                                'text' => $subject,
                            ],
                            'recipients' => [
                                ['address' => $to],
                            ],
                                ],
                                ['Authorization: e10538e0ac4884516c60e319087f5897fbac039e']);

                        $result = (json_decode($email_results));

                        $result = $result->results->total_accepted_recipients;

                        if ($result > 0) {
                            $status = '1';
                        } else {
                            $status = '0';
                        }
        }
	public function temp_email_reset()
	{       
                $email=trim($_POST['email']);
                $users= $this->db->query("select * from users where email_id='$email'")->result_array();
                if($users[0]['status']==2)
                {
                echo json_encode(array('success' => false, 'message' => 'You Account Not Activated Yet, Please Contact Admin!'));    
                }    
                if($users[0]['status']!=2)
                {
                $subject="New Temporary Email - 64FacetCRM";
                $message.="Hi,<br>";
                $password = $this->generatePassword();
//                exit;
                $message.="Please find your latest autogenerated reset password below, please use this password for login,<br>";
                $message.="<br><b>Password:</b> $password<br>";
                $to=$email;
                
                $data=array(
                    "subject"=>$subject,
                    "message"=>$message,
                    "to"=>$to
                    );
//                print_r($data);
//                exit;
                echo $this->customtextemail($data);
                exit;
                $password2= md5($password);
                $this->db->query("update users set password='$password2' where email_id='$email'");    
                
                echo json_encode(array('success' => true, 'message' => 'Please Check Your Email, New Temporary Email Sent!'));    
                }    
                
                
	}  
        
        public function logout() {
        // Destroy the session and clear all session data
        $this->session->sess_destroy();

        // Redirect to the login page or any other desired page
        redirect(base_url().'login');
        }
        
        public function process_login() {
        $this->load->model('User_model'); // Load the user model  
        if($_POST['id']!='') 
        {
            $add_password1=($_POST['add_password']);
            $add_password=md5($_POST['add_password']);
            $id= ($_POST['id']);
            $this->db->query("update users set password='$add_password' where id='$id'");
            $update='1';
            $users=$this->db->query("select * from users where id='$id'")->row_array();
            $user = $this->User_model->authenticate($users['email_id'], $add_password1);
        } 
        
        if($update!=1)
        {   
            $username = $this->input->post('username');
            $password = $this->input->post('password');
            $remember_me = $this->input->post('remember_me');
            if($update=='1')
            {
                $user=$user;
            }
            else 
            {
                $password= md5($password); 
    //            $final=("select * from users where email='$username' and password='$password' ");
                $final=$this->db->query("select * from users where username='$username' and password='$password' ")->row_array();
                
                $ip_address=$this->input->ip_address();
                $screen_resolution = $this->input->server('HTTP_USER_AGENT');
                $device = $this->input->server('HTTP_USER_AGENT');
                $browser = $this->input->server('HTTP_USER_AGENT');
                
                $log_data = array(
                    'user_id' => $final['id'],
                    'timestamp' => date('Y-m-d H:i:s'),
                    'ip_address' => $ip_address,
                    'screen_resolution' => $screen_resolution,
                    'device' => $device,
                    'browser' => $browser
                );

                $this->db->insert('logs', $log_data);    
                $user=$final;
            
            }
        }  
      
        if ($user) {
            $id=($user['id']);
            $user_access=$this->db->query("select DISTINCT(url_id) as url_ids from url_feature_access  "
                    . "where user_id='$id' ")->result_array();
            $user_access2=$this->db->query("select a.*,u.menu_handle,u.name,u.table from url_feature_access a  "
                    . " LEFT JOIN urls u ON a.url_id=u.id "
                    . " where a.user_id='$id' order by u.url_access_sort ASC ")->result_array();
            $user=array_merge($user,array("access_urls"=>$user_access),array("access_fields"=>$user_access2));
            $this->session->set_userdata($user);
            if ($remember_me) {   
                $this->input->set_cookie('remember_me', $user['id'], 3600 * 24 * 30); // Remember for 30 days
            }
           echo "1";
        } else {
            $this->session->set_flashdata('login_failed', 'Invalid username or password.');
        
        }
        }  
    
    
}
